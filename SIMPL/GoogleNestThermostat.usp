#SYMBOL_NAME "Google Nest Thermostat"

#USER_SIMPLSHARP_LIBRARY "GoogleNest"

digital_input Debug, GetDevice, _skip_, Heat, Cool, HeatCool, HvacOff, RunFan15_Mins, RunFan30_Mins, RunFan45_Mins, RunFan1_Hour, RunFan2_Hours, RunFan4_Hours, RunFan8_Hours, RunFan12_Hours, FanOff, _skip_, EcoManualEco, EcoOff;
analog_input _skip_, _skip_, CoolSetpoint, HeatSetpoint;

digital_output IsOnline, _skip_, HvacIsHeat, HvacIsCool, HvacIsHeatCool, HvacIsOff, HvacIsHeating, HvacIsCooling, HvacIsIdle, IsCelsius, IsFahrenheit, _skip_, _skip_, FanIsOn, _skip_, _skip_, EcoIsManualEco, EcoIsOff;
analog_output _skip_, HumidityPercentage, CurrentHeatSetpoint, CurrentCoolSetpoint, _skip_, CurrentEcoHeatSetpoint, CurrentEcoCoolSetpoint, _skip_, CurrentTemperature;
string_output CurrentTemperatureString, RoomName, ErrorMessage;

string_parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, DeviceName[65534];

GoogleNestThermostat thermostat;

push Debug
{
	thermostat.Debug = 1;
}

release Debug
{
	thermostat.Debug = 0;
}

push GetDevice
{
	thermostat.GetDevice();
}

push Heat
{
	thermostat.SetHvacMode("HEAT");
}

push Cool
{
	thermostat.SetHvacMode("COOL");
}

push HeatCool
{
	thermostat.SetHvacMode("HEATCOOL");
}

push HvacOff
{
	thermostat.SetHvacMode("OFF");
}

push RunFan15_Mins
{
	thermostat.RunFan(900);
}

push RunFan30_Mins
{
	thermostat.RunFan(1800);
}

push RunFan45_Mins
{
	thermostat.RunFan(2700);
}

push RunFan1_Hour
{
	thermostat.RunFan(3600);
}

push RunFan2_Hours
{
	thermostat.RunFan(7200);
}

push RunFan4_Hours
{
	thermostat.RunFan(14400);
}

push RunFan8_Hours
{
	thermostat.RunFan(28800);
}

push RunFan12_Hours
{
	thermostat.RunFan(43200);
}

push FanOff
{
	thermostat.FanOff();
}

push EcoManualEco
{
	thermostat.SetEcoMode("MANUAL_ECO");
}

push EcoOff
{
	thermostat.SetEcoMode("OFF");
}

threadsafe change CoolSetpoint
{
	integer x;
	
	Seed(CurrentCoolSetpoint);
	x = Random(1, 65534);
	
	while(x != CoolSetpoint)
	{
		x = CoolSetpoint;
		
		if(HvacIsCool)
		{
			thermostat.SetCool(x);
		}
		else if(HvacIsHeatCool)
		{
			thermostat.SetRange(HeatSetpoint, x);
		}
	}
}

threadsafe change HeatSetpoint
{
	integer x;
	
	Seed(CurrentHeatSetpoint);
	x = Random(1, 65534);
	
	while(x != HeatSetpoint)
	{
		x = HeatSetpoint;
		if(HvacIsHeat)
		{
			thermostat.SetHeat(x);
		}
		else if(HvacIsHeatCool)
		{
			thermostat.SetRange(x, CoolSetpoint);
		}
	}
}

callback function newOnline(integer args)
{
	IsOnline = args;
}

callback function newFanState(integer args)
{
	FanIsOn = args;
}

callback function newCurrentTemperature(integer value, string sValue)
{
	CurrentTemperature = value;
	CurrentTemperatureString = sValue;
}

callback function newEcoModeState(string args)
{
	if(args = "OFF")
	{
		EcoIsManualEco = OFF;
		EcoIsOff = ON;
	}
	if(args = "MANUAL_ECO")
	{
		EcoIsManualEco = ON;
		EcoIsOff = OFF;
	}
}

callback function newTemperatureMode(string args)
{
	if(args = "CELSIUS")
	{
		IsCelsius = ON;
		IsFahrenheit = OFF;
	}
	else if(args = "FAHRENHEIT")
	{
		IsCelsius = OFF;
		IsFahrenheit = ON;
	}
}

callback function newHumidity(integer args)
{ 
	HumidityPercentage = args;
}

callback function newCurrentMode(string args)
{
	if(args = "HEAT")
	{
		HvacIsHeat = ON;
		HvacIsCool = OFF;
		HvacIsHeatCool = OFF;
		HvacIsOff = OFF;
	}
	else if(args = "COOL")
	{
		HvacIsHeat = OFF;
		HvacIsCool = ON;
		HvacIsHeatCool = OFF;
		HvacIsOff = OFF;
	}
	else if(args = "HEATCOOL")
	{
		HvacIsHeat = OFF;
		HvacIsCool = OFF;
		HvacIsHeatCool = ON;
		HvacIsOff = OFF;
	}
	else if(args = "OFF")
	{
		HvacIsHeat = OFF;
		HvacIsCool = OFF;
		HvacIsHeatCool = OFF;
		HvacIsOff = ON;
	}
}

callback function newEcoHeatSetPoint(integer args)
{
	CurrentEcoHeatSetpoint = args;
}

callback function newEcoCoolSetPoint(integer args)
{
	CurrentEcoCoolSetpoint = args;
} 

callback function newCurrentHeatSetpoint(integer args)
{
	CurrentHeatSetpoint = args;
}

callback function newCurrentCoolSetpoint(integer args)
{
	CurrentCoolSetpoint = args;
}

callback function newRoomName(string name)
{
	RoomName = name;
}

callback function newCurrentHvac(string hvac)
{
	if(hvac = "HEATING")
	{
		HvacIsHeating = ON;
		HvacIsCooling = OFF;
		HvacIsIdle = OFF;
	}
	else if(hvac = "COOLING")
	{
		HvacIsHeating = OFF;
		HvacIsCooling = ON;
		HvacIsIdle = OFF;
	}
	else if(hvac = "OFF")
	{
		HvacIsHeating = OFF;
		HvacIsCooling = OFF;
		HvacIsIdle = ON;
	}
}

callback function newErrorMsg(string msg)
{
	ErrorMessage = msg;
}

function Main()
{
	RegisterDelegate(thermostat, onOnline, newOnline);
	RegisterDelegate(thermostat, onFanState,  newFanState);
	RegisterDelegate(thermostat, onCurrentTemperature, newCurrentTemperature);
	RegisterDelegate(thermostat, onEcoModeState, newEcoModeState);
	RegisterDelegate(thermostat, onTemperatureMode, newTemperatureMode);
	RegisterDelegate(thermostat, onHumidity, newHumidity);
	RegisterDelegate(thermostat, onCurrentMode, newCurrentMode);
	RegisterDelegate(thermostat, onEcoHeatSetPoint, newEcoHeatSetPoint);
	RegisterDelegate(thermostat, onEcoCoolSetPoint, newEcoCoolSetPoint);
	RegisterDelegate(thermostat, onCurrentHeatSetPoint, newCurrentHeatSetpoint);
	RegisterDelegate(thermostat, onCurrentCoolSetPoint, newCurrentCoolSetpoint);
	RegisterDelegate(thermostat, onRoomName, newRoomName);
	RegisterDelegate(thermostat, onCurrentHvac, newCurrentHvac);
	RegisterDelegate(thermostat, onErrorMsg, newErrorMsg);
	
	thermostat.Initialize(DeviceName);
}
